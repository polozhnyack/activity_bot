from aiogram import Router
from aiogram_dialog import DialogManager
from aiogram.types import Message, CallbackQuery, Chat, FSInputFile
from aiogram.types import ContentType, ReplyKeyboardMarkup, KeyboardButton, KeyboardButtonRequestUser, ReplyKeyboardRemove

from aiogram_dialog.widgets.kbd import Select

from dialogs.states import *
from aiogram_dialog.widgets.input import MessageInput

from models.methods import UserService, ChildService
from models.models import *
from logger import logger

from openpyxl import Workbook
from openpyxl.styles import Font, Alignment, PatternFill
from sqlalchemy import select
from datetime import datetime

from utils import delete_file


async def creator_child(callback: CallbackQuery, button, dialog_manager: DialogManager):
    params = callback.data.split("_")
    param = params[0]
    
    logger.debug(param)

    dialog_manager.dialog_data["param"] = param
    await dialog_manager.switch_to(state=AdminState.child_create_or_delete)


async def child_handler(
        message: Message,
        message_input: MessageInput,
        dialog_manager: DialogManager,
        **kwargs
):
    param = dialog_manager.dialog_data.get("param")
    child_service: ChildService = dialog_manager.middleware_data["ChildService"]

    input_text = message.text.strip()

    if param == "create":
        parts = input_text.split(",")
        if len(parts) < 2:
            await message.answer("‚ùå –ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –§–ò –∏ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤, 11.11.2011)")
            return
        full_name = parts[0].strip()
        from datetime import datetime
        try:
            birth_date = datetime.strptime(parts[1].strip(), "%d.%m.%Y").date()
        except ValueError:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.MM.–ì–ì–ì–ì")
            return

        child = await child_service.create(full_name=full_name, birth_date=birth_date)
        await message.answer(f"‚úÖ –†–µ–±—ë–Ω–æ–∫ —Å–æ–∑–¥–∞–Ω: {child.full_name} ({child.code})")

    elif param == "delete":
        child_code = input_text
        success = await child_service.delete_by_code(child_code)
        if success:
            await message.answer(f"‚úÖ –†–µ–±—ë–Ω–æ–∫ {child_code} —É–¥–∞–ª—ë–Ω")
        else:
            await message.answer(f"‚ùå –†–µ–±—ë–Ω–æ–∫ {child_code} –Ω–µ –Ω–∞–π–¥–µ–Ω")

    await dialog_manager.switch_to(AdminState.admin_menu)



async def user_contact_handler(
        message: Message,
        message_input: MessageInput,
        dialog_manager: DialogManager,
        **kwargs
):
    
    logger.debug("–ó–∞–ø—É—â–µ–Ω user_contact_handler")
    user_service: UserService = dialog_manager.middleware_data["UserService"]

    if message.user_shared:
        user_id = message.user_shared.user_id
        selected_role = dialog_manager.dialog_data.pop("selected_role", None)

        if not selected_role:
            await message.answer("‚ùå –†–æ–ª—å –Ω–µ –≤—ã–±—Ä–∞–Ω–∞.")
            return

        updated = await user_service.update_role(
            user_id=user_id,
            new_role_str=selected_role
        )

        if updated:
            chat: Chat = await message.bot.get_chat(user_id)
            full_name = getattr(chat, "full_name", f"ID {user_id}")
            await message.answer(
                f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {full_name} —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–≤–æ–µ–Ω–∞ —Ä–æ–ª—å: {selected_role.capitalize()}"
            )
        else:
            await message.answer(
                f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID {user_id}. –í–æ–∑–º–æ–∂–Ω–æ, —Ä–æ–ª—å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞ –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω."
            )
    else:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ.")

    await dialog_manager.switch_to(AdminState.admin_menu)


keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [
            KeyboardButton(
                text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è üëÄ",
                request_user=KeyboardButtonRequestUser(
                    request_id=123,
                    user_is_bot=False
                )
            )
        ]
    ],
    resize_keyboard=True,
    one_time_keyboard=True,
)


async def on_role_selected(
    callback: CallbackQuery,
    widget: Select,
    manager: DialogManager,
    item_id: str,
):
    
    message = await callback.bot.send_message(
        chat_id=callback.from_user.id,
        text="üìÅ",
        reply_markup=keyboard
    )
    
    manager.dialog_data["pupa"] = message.message_id
    manager.dialog_data["selected_role"] = item_id

    await callback.answer(f"‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–æ–ª—å: {item_id}")
    await manager.switch_to(AdminState.user_select)


async def go_back_admin_menu(callback: CallbackQuery, button, dialog_manager: DialogManager):
    pupa = dialog_manager.dialog_data.get("pupa")
    if pupa:
        try:
            message = await callback.message.answer(
                text=callback.message.text or "üîÑ",
                reply_markup=ReplyKeyboardRemove()
            )

            await message.delete()

            await callback.bot.delete_message(
                chat_id=callback.from_user.id,
                message_id=pupa
            )

        except Exception as e:
            message = await callback.message.answer(
                "üîÑ",
                reply_markup=ReplyKeyboardRemove()
            )
            await message.delete()

    dialog_manager.dialog_data.clear()
    await dialog_manager.switch_to(state=AdminState.admin_menu)





async def export_children_to_excel(callback: CallbackQuery, button, dialog_manager: DialogManager):
    """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –≤—Å–µ—Ö –¥–µ—Ç–µ–π –≤ Excel —Å –ø–æ–ª—è–º–∏ code, full_name, birth_date."""
    session = dialog_manager.middleware_data["session"]
    userService: UserService = dialog_manager.middleware_data["UserService"]

    result = await session.execute(
        select(Child.code, Child.full_name, Child.birth_date)
    )
    children = result.all()

    wb = Workbook()
    ws = wb.active
    ws.title = "–î–µ—Ç–∏"

    headers = ["–ö–æ–¥ —Ä–µ–±—ë–Ω–∫–∞", "–§–ò–û", "–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è"]
    ws.append(headers)

    header_font = Font(bold=True, color="FFFFFF")
    header_fill = PatternFill(start_color="4F81BD", end_color="4F81BD", fill_type="solid")

    for cell in ws[1]:
        cell.font = header_font
        cell.fill = header_fill
        cell.alignment = Alignment(horizontal="center", vertical="center")

    ws.row_dimensions[1].height = 25

    for code, full_name, birth_date in children:
        ws.append([
            code,
            full_name or "‚Äî",
            birth_date.strftime("%d.%m.%Y") if birth_date else "‚Äî"
        ])

    center_alignment = Alignment(horizontal="center", vertical="center")
    for row in ws.iter_rows(min_row=2, max_row=ws.max_row):
        for cell in row:
            cell.alignment = center_alignment

    for column_cells in ws.columns:
        length = max(len(str(cell.value or "")) for cell in column_cells)
        adjusted_width = length + 2
        ws.column_dimensions[column_cells[0].column_letter].width = adjusted_width

    filename = f"–¢–∞–±–ª–∏—Ü–∞_–∫–æ–¥–æ–≤_{datetime.now().strftime('%d_%m_%Y')}.xlsx"
    wb.save(filename)

    user: User = await userService.get_by_id(callback.from_user.id)

    if user.role == UserRole.admin:
        await callback.bot.send_document(
            chat_id=callback.from_user.id,
            document=FSInputFile(path=filename),
            caption=f"<b>–¢–∞–±–ª–∏—Ü–∞ –∫–æ–¥–æ–≤ –≤—Å–µ—Ö –¥–µ—Ç–µ–π</b>",
            parse_mode="HTML"
        )

        delete_file(filename)
    return 
